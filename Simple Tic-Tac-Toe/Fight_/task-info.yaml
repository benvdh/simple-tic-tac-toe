type: edu
custom_name: Fight!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return FREE;
                default:
                    return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        } else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[]{
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                TicTacToeField ticTacToeField = new TicTacToeField(field);
                return ticTacToeField;
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

        public int getXCount() {

            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.X))
                .count();
        }

        public int getOCount() {
            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.O))
                .count();
        }
    }


    class Clue {
        int x, y;

        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[]{
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }

                if (Math.abs(curr.getXCount() - curr.getOCount()) > 1) {
                    return CheckResult.wrong("Wrong number of X's and O's in the field!");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (!(lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/Grid.java
  visible: true
  text: |
    package tictactoe;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Grid {
        private String fieldsString;
        public static final String EMPTY_GRID = "_________";
        private final char[][] grid;
        private final List<List<FieldState>> fieldStateGrid;

        Grid(String fieldsString) {
            this.fieldsString = fieldsString;
            this.grid = initGridArray();
            this.fieldStateGrid = initFieldStateGrid();
        }

        public String[] getFormattedGrid() {
            String[] formattedGrid = new String[5];
            final String horizontalBoundary = "---------";

            formattedGrid[0] = horizontalBoundary;

            for (int i = 0, j = 1; i < fieldsString.length(); i+=3, j++) {
                // replaceAll trick based on: https://stackoverflow.com/a/4470112/10243474
                String row = new String(grid[j - 1]).replaceAll("\\B", " ");
                formattedGrid[j] = String.format("| %s |", row);
            }

            formattedGrid[4] = horizontalBoundary;

            return formattedGrid;
        }

        private char[][] initGridArray() {
            char[][] gridArray = new char[3][3];

            for (int i = 0, j = 0; i < fieldsString.length(); i+=3, j++) {
                gridArray[j] = fieldsString.substring(i, i + 3).toCharArray();
            }

            return gridArray;
        }

        private List<List<FieldState>> initFieldStateGrid() {
            List<List<FieldState>> fieldStateGrid = new ArrayList<>();

            for (int j = 0; j < grid.length; j++) {
                char[] row = grid[j];
                fieldStateGrid.add(new ArrayList<>());

                for (int i = 0; i < row.length; i++) {
                    char fieldStateSymbol = row[i];

                    fieldStateGrid
                            .get(j)
                            .add(i, FieldState.findBySymbol(fieldStateSymbol));
                }
            }

            return fieldStateGrid;
        }

        public List<List<FieldState>> getTransposedFieldStateGrid() {
            List<List<FieldState>> transposed = new ArrayList<>(fieldStateGrid.get(0).size());

            // ensure we have all rows initialized beforehand, to prevent IndexOutOfBounds
            for (int i = 0; i < fieldStateGrid.size(); i++) {
                transposed.add(new ArrayList<>(fieldStateGrid.size()));
            }

            for (int i = 0; i < fieldStateGrid.size(); i++) {
                List<FieldState> row = fieldStateGrid.get(i);

                for (int j = 0; j < row.size(); j++) {
                    transposed.get(j).add(i, row.get(j));
                }
            }

            return transposed;
        }

        public boolean areInvalidCoordinates(int[] coordinates) {
            return coordinates[0] < 1 ||
                    coordinates[0] > grid.length ||
                    coordinates[1] < 1 ||
                    coordinates[1] > grid.length;
        }

        public boolean isCellOccupied(int[] coordinates) {
            return getCellValue(coordinates) != FieldState.EMPTY.symbol;
        }

        private int[] translateCoordinatesToIndices(int[] coordinates) {
            int[] indices = Arrays.copyOf(coordinates, coordinates.length);
            indices[0] -= 1;
            indices[1] -= 1;

            return indices;
        }

        private char getCellValue(int[] coordinates) {
            int[] indices = translateCoordinatesToIndices(coordinates);
            return grid[indices[0]][indices[1]];
        }

        private void setCellValue(int[] coordinates, FieldState newFieldState) {
            int[] indices = translateCoordinatesToIndices(coordinates);

            // update grid
            this.grid[indices[0]][indices[1]] = newFieldState.symbol;
            // update fieldStateGrid
            this.fieldStateGrid.get(indices[0]).set(indices[1], newFieldState);
        }

        private String getFieldsStringFromGrid() {
            StringBuilder builder = new StringBuilder();

            for (char[] row : grid) {
                builder.append(row);
            }

            return builder.toString();
        }

        public void updateFieldState(int[] coordinates, FieldState newFieldState) {
            setCellValue(coordinates, newFieldState);
            this.fieldsString = getFieldsStringFromGrid();
        }

        public String getFieldsString() {
            return fieldsString;
        }

        public List<List<FieldState>> getFieldStateGrid() {
            return fieldStateGrid;
        }
    }
  learner_created: true
- name: src/tictactoe/GridAnalyzer.java
  visible: true
  text: "package tictactoe;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.EnumSet;\nimport java.util.List;\n\npublic class GridAnalyzer\
    \ {\n    final private Grid grid;\n    final private List<List<FieldState>> winningRowsResult;\n\
    \    final private List<List<FieldState>> winningColumnsResult;\n    final private\
    \ List<List<FieldState>> winningDiagonalsResult;\n\n    public GridAnalyzer(Grid\
    \ grid) {\n        this.grid = grid;\n        this.winningRowsResult = detectWinningRows(grid.getFieldStateGrid());\n\
    \        this.winningColumnsResult = detectWinningRows(grid.getTransposedFieldStateGrid());\n\
    \        this.winningDiagonalsResult = detectWinningDiagonals();\n    }\n\n  \
    \  public GridState analyze() {\n        List<List<List<FieldState>>> analysisResults\
    \ = Arrays.asList(\n                winningRowsResult,\n                winningColumnsResult,\n\
    \                winningDiagonalsResult\n        );\n\n        if (isGameInProgress()\
    \ && !hasImpossibleState()) {\n            return GridState.GAME_NOT_FINISHED;\n\
    \        }\n\n        if (hasImpossibleState()) {\n            return GridState.IMPOSSIBLE;\n\
    \        }\n\n        if (isDraw()) {\n            return GridState.DRAW;\n  \
    \      }\n\n        for (List<List<FieldState>> analysisResult : analysisResults)\
    \ {\n            GridState winner = detectWinner(analysisResult);\n\n        \
    \    if (winner != null) {\n                return winner;\n            }\n  \
    \      }\n\n        return null;\n    }\n\n    private static GridState detectWinner(List<List<FieldState>>\
    \ analysisResult) {\n        if (!analysisResult.isEmpty()) {\n            return\
    \ GridState.getGridStateByFieldState(\n                    analysisResult.get(0).get(0)\n\
    \            );\n        } else {\n            return null;\n        }\n    }\n\
    \n    private static List<List<FieldState>> detectWinningRows(List<List<FieldState>>\
    \ fieldStateGrid) {\n        List<List<FieldState>> winningRows = new ArrayList<>();\n\
    \n        for (List<FieldState> row : fieldStateGrid) {\n            EnumSet<FieldState>\
    \ uniqueValuesInRow = EnumSet.copyOf(row);\n\n            if (uniqueValuesInRow.size()\
    \ == 1 && !uniqueValuesInRow.contains(FieldState.EMPTY)) {\n                winningRows.add(row);\n\
    \            }\n        }\n        return winningRows;\n    }\n    \n    private\
    \ List<List<FieldState>> detectWinningDiagonals() {\n        List<List<FieldState>>\
    \ winningDiagonals = new ArrayList<>();\n        List<FieldState> forwardDiagonal\
    \ = new ArrayList<>();\n        List<FieldState> backwardDiagonal = new ArrayList<>();\n\
    \        List<List<FieldState>> fieldStateGrid = grid.getFieldStateGrid();\n \
    \       int gridSize = fieldStateGrid.size();\n\n        // extract diagonals\n\
    \        for (int i = 0, j = gridSize-1;\n             i < gridSize;\n       \
    \      i++, j--\n        ) {\n            forwardDiagonal.add(fieldStateGrid.get(i).get(i));\n\
    \            backwardDiagonal.add(fieldStateGrid.get(i).get(j));\n        }\n\
    \            EnumSet<FieldState> uniqueValuesForward = EnumSet.copyOf(forwardDiagonal);\n\
    \            EnumSet<FieldState> uniqueValuesBackward = EnumSet.copyOf(backwardDiagonal);\n\
    \n        if (uniqueValuesForward.size() == 1 && !uniqueValuesForward.contains(FieldState.EMPTY))\
    \ {\n            winningDiagonals.add(forwardDiagonal);\n        }\n\n       \
    \ if (uniqueValuesBackward.size() == 1 && !uniqueValuesBackward.contains(FieldState.EMPTY))\
    \ {\n            winningDiagonals.add(backwardDiagonal);\n        }\n        \n\
    \        return winningDiagonals;\n    }\n\n    private boolean hasImpossibleState()\
    \ {\n        long xCount = getCountByFieldState(FieldState.X);\n        long oCount\
    \ = getCountByFieldState(FieldState.O);\n        long diff = xCount > oCount ?\
    \ xCount - oCount : oCount - xCount;\n\n        return diff >= 2 ||\n        \
    \        winningRowsResult.size() > 1 ||\n                winningColumnsResult.size()\
    \ > 1 ||\n                winningDiagonalsResult.size() > 1;\n    }\n\n    private\
    \ boolean isDraw() {\n        boolean hasNoEmptyCells = !hasEmptyCells();\n  \
    \      boolean hasNoWinners = hasNoWinners();\n\n        return hasNoEmptyCells\
    \ && hasNoWinners;\n\n    }\n\n    private boolean hasEmptyCells() {\n       \
    \ return getCountByFieldState(FieldState.EMPTY) > 0;\n    }\n\n    private boolean\
    \ hasNoWinners() {\n        return winningRowsResult.isEmpty() && winningColumnsResult.isEmpty()\
    \ && winningDiagonalsResult.isEmpty();\n    }\n\n    private boolean isGameInProgress()\
    \ {\n        return hasEmptyCells() && hasNoWinners();\n    }\n\n    private long\
    \ getCountByFieldState(FieldState state) {\n        return grid\n            \
    \    .getFieldsString()\n                .chars()\n                .filter(ch\
    \ -> ch == state.symbol)\n                .count();\n    }\n}\n"
  learner_created: true
- name: src/tictactoe/GridState.java
  visible: true
  text: |
    package tictactoe;

    public enum GridState {
        X_WINS("X wins", true, FieldState.X),
        O_WINS("O wins", true, FieldState.O),
        DRAW("Draw", true, null),
        IMPOSSIBLE("Impossible", true, null),
        GAME_NOT_FINISHED("Game not finished", false, FieldState.EMPTY);

        String message;
        boolean finished;
        FieldState relatedFieldState;

        GridState(String message, boolean finished, FieldState relatedFieldState) {
            this.message = message;
            this.finished = finished;
            this.relatedFieldState = relatedFieldState;
        }

        public static GridState getGridStateByFieldState(FieldState fieldState) {
            for (GridState state : values()) {
                if (state.relatedFieldState == fieldState) {
                    return state;
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/tictactoe/FieldState.java
  visible: true
  text: |
    package tictactoe;

    public enum FieldState {
        O('O'),
        X('X'),
        EMPTY('_');

        char symbol;

        FieldState(char symbol) {
            this.symbol = symbol;
        }

        public static FieldState findBySymbol(char symbol) {
            for (FieldState state : values()) {
                if (state.symbol == symbol) {
                    return state;
                }
            }
            return null;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/48/stages/259/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 04 Aug 2021 16:19:58 UTC
record: -1
